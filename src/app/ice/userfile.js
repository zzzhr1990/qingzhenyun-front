// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `userfile.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(module, require, exports)
{
    const Ice = require("ice").Ice;
    const _ModuleRegistry = Ice._ModuleRegistry;
    const common = require("./common").common;
    const Slice = Ice.Slice;

    let userfile = _ModuleRegistry.module("userfile");

    userfile.FileOperationException = class extends common.CommonRpcException
    {
        constructor(innerCode, innerMessage, fileType = 0, _cause = "")
        {
            super(innerCode, innerMessage, _cause);
            this.fileType = fileType;
        }

        static get _parent()
        {
            return common.CommonRpcException;
        }

        static get _id()
        {
            return "::userfile::FileOperationException";
        }

        _mostDerivedType()
        {
            return userfile.FileOperationException;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeInt(this.fileType);
        }

        _readMemberImpl(istr)
        {
            this.fileType = istr.readInt();
        }
    };

    const iceC_userfile_UserFileResponse_ids = [
        "::Ice::Object",
        "::userfile::UserFileResponse"
    ];

    userfile.UserFileResponse = class extends Ice.Value
    {
        constructor(uuid = "", storeId = "", userId = new Ice.Long(0, 0), pathId = "", path = "", size = new Ice.Long(0, 0), parent = "", mime = "", type = 0, atime = new Ice.Long(0, 0), mtime = new Ice.Long(0, 0), ctime = new Ice.Long(0, 0), alias = "", from = 0, name = "", ext = "", preview = 0, flag = 0, recycle = 0)
        {
            super();
            this.uuid = uuid;
            this.storeId = storeId;
            this.userId = userId;
            this.pathId = pathId;
            this.path = path;
            this.size = size;
            this.parent = parent;
            this.mime = mime;
            this.type = type;
            this.atime = atime;
            this.mtime = mtime;
            this.ctime = ctime;
            this.alias = alias;
            this.from = from;
            this.name = name;
            this.ext = ext;
            this.preview = preview;
            this.flag = flag;
            this.recycle = recycle;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeString(this.uuid);
            ostr.writeString(this.storeId);
            ostr.writeLong(this.userId);
            ostr.writeString(this.pathId);
            ostr.writeString(this.path);
            ostr.writeLong(this.size);
            ostr.writeString(this.parent);
            ostr.writeString(this.mime);
            ostr.writeInt(this.type);
            ostr.writeLong(this.atime);
            ostr.writeLong(this.mtime);
            ostr.writeLong(this.ctime);
            ostr.writeString(this.alias);
            ostr.writeInt(this.from);
            ostr.writeString(this.name);
            ostr.writeString(this.ext);
            ostr.writeInt(this.preview);
            ostr.writeInt(this.flag);
            ostr.writeInt(this.recycle);
        }

        _iceReadMemberImpl(istr)
        {
            this.uuid = istr.readString();
            this.storeId = istr.readString();
            this.userId = istr.readLong();
            this.pathId = istr.readString();
            this.path = istr.readString();
            this.size = istr.readLong();
            this.parent = istr.readString();
            this.mime = istr.readString();
            this.type = istr.readInt();
            this.atime = istr.readLong();
            this.mtime = istr.readLong();
            this.ctime = istr.readLong();
            this.alias = istr.readString();
            this.from = istr.readInt();
            this.name = istr.readString();
            this.ext = istr.readString();
            this.preview = istr.readInt();
            this.flag = istr.readInt();
            this.recycle = istr.readInt();
        }
    };

    Slice.defineValue(userfile.UserFileResponse, iceC_userfile_UserFileResponse_ids[1], false);

    userfile.UserFileResponseDisp = class extends Ice.Object
    {
    };

    Slice.defineOperations(userfile.UserFileResponseDisp, undefined, iceC_userfile_UserFileResponse_ids, 1);

    const iceC_userfile_SimpleFile_ids = [
        "::Ice::Object",
        "::userfile::SimpleFile"
    ];

    userfile.SimpleFile = class extends Ice.Value
    {
        constructor(uuid = "", path = "")
        {
            super();
            this.uuid = uuid;
            this.path = path;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeString(this.uuid);
            ostr.writeString(this.path);
        }

        _iceReadMemberImpl(istr)
        {
            this.uuid = istr.readString();
            this.path = istr.readString();
        }
    };

    Slice.defineValue(userfile.SimpleFile, iceC_userfile_SimpleFile_ids[1], false);

    userfile.SimpleFileDisp = class extends Ice.Object
    {
    };

    Slice.defineOperations(userfile.SimpleFileDisp, undefined, iceC_userfile_SimpleFile_ids, 1);

    Slice.defineSequence(userfile, "UserFileResponseListHelper", "Ice.ObjectHelper", false, "userfile.UserFileResponse");

    Slice.defineSequence(userfile, "SimpleFileListHelper", "Ice.ObjectHelper", false, "userfile.SimpleFile");

    const iceC_userfile_UserFilePageResponse_ids = [
        "::Ice::Object",
        "::common::CommonPage",
        "::userfile::UserFilePageResponse"
    ];

    userfile.UserFilePageResponse = class extends common.CommonPage
    {
        constructor(page, pageSize, totalCount, totalPage, list = null, info = null)
        {
            super(page, pageSize, totalCount, totalPage);
            this.list = list;
            this.info = info;
        }

        _iceWriteMemberImpl(ostr)
        {
            userfile.UserFileResponseListHelper.write(ostr, this.list);
            ostr.writeValue(this.info);
        }

        _iceReadMemberImpl(istr)
        {
            this.list = userfile.UserFileResponseListHelper.read(istr);
            istr.readValue(obj => this.info = obj, userfile.UserFileResponse);
        }
    };

    Slice.defineValue(userfile.UserFilePageResponse, iceC_userfile_UserFilePageResponse_ids[2], false);

    userfile.UserFilePageResponseDisp = class extends common.CommonPageDisp
    {
    };

    Slice.defineOperations(userfile.UserFilePageResponseDisp, undefined, iceC_userfile_UserFilePageResponse_ids, 2);

    const iceC_userfile_UserOfflineResponse_ids = [
        "::Ice::Object",
        "::userfile::UserOfflineResponse"
    ];

    userfile.UserOfflineResponse = class extends Ice.Value
    {
        constructor(userId = new Ice.Long(0, 0), taskHash = "", path = "", size = new Ice.Long(0, 0), name = "", files = "", copied = "", createTime = new Ice.Long(0, 0), uuid = "", destUuid = "", progress = 0, status = 0)
        {
            super();
            this.userId = userId;
            this.taskHash = taskHash;
            this.path = path;
            this.size = size;
            this.name = name;
            this.files = files;
            this.copied = copied;
            this.createTime = createTime;
            this.uuid = uuid;
            this.destUuid = destUuid;
            this.progress = progress;
            this.status = status;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeLong(this.userId);
            ostr.writeString(this.taskHash);
            ostr.writeString(this.path);
            ostr.writeLong(this.size);
            ostr.writeString(this.name);
            ostr.writeString(this.files);
            ostr.writeString(this.copied);
            ostr.writeLong(this.createTime);
            ostr.writeString(this.uuid);
            ostr.writeString(this.destUuid);
            ostr.writeInt(this.progress);
            ostr.writeInt(this.status);
        }

        _iceReadMemberImpl(istr)
        {
            this.userId = istr.readLong();
            this.taskHash = istr.readString();
            this.path = istr.readString();
            this.size = istr.readLong();
            this.name = istr.readString();
            this.files = istr.readString();
            this.copied = istr.readString();
            this.createTime = istr.readLong();
            this.uuid = istr.readString();
            this.destUuid = istr.readString();
            this.progress = istr.readInt();
            this.status = istr.readInt();
        }
    };

    Slice.defineValue(userfile.UserOfflineResponse, iceC_userfile_UserOfflineResponse_ids[1], false);

    userfile.UserOfflineResponseDisp = class extends Ice.Object
    {
    };

    Slice.defineOperations(userfile.UserOfflineResponseDisp, undefined, iceC_userfile_UserOfflineResponse_ids, 1);

    const iceC_userfile_UserAsyncTask_ids = [
        "::Ice::Object",
        "::userfile::UserAsyncTask"
    ];

    userfile.UserAsyncTask = class extends Ice.Value
    {
        constructor(userId = new Ice.Long(0, 0), uuid = "", destUuid = "", type = 0, createTime = new Ice.Long(0, 0))
        {
            super();
            this.userId = userId;
            this.uuid = uuid;
            this.destUuid = destUuid;
            this.type = type;
            this.createTime = createTime;
        }

        _iceWriteMemberImpl(ostr)
        {
            ostr.writeLong(this.userId);
            ostr.writeString(this.uuid);
            ostr.writeString(this.destUuid);
            ostr.writeInt(this.type);
            ostr.writeLong(this.createTime);
        }

        _iceReadMemberImpl(istr)
        {
            this.userId = istr.readLong();
            this.uuid = istr.readString();
            this.destUuid = istr.readString();
            this.type = istr.readInt();
            this.createTime = istr.readLong();
        }
    };

    Slice.defineValue(userfile.UserAsyncTask, iceC_userfile_UserAsyncTask_ids[1], false);

    userfile.UserAsyncTaskDisp = class extends Ice.Object
    {
    };

    Slice.defineOperations(userfile.UserAsyncTaskDisp, undefined, iceC_userfile_UserAsyncTask_ids, 1);

    Slice.defineSequence(userfile, "UserOfflineResponseListHelper", "Ice.ObjectHelper", false, "userfile.UserOfflineResponse");

    const iceC_userfile_UserOfflinePageResponse_ids = [
        "::Ice::Object",
        "::common::CommonPage",
        "::userfile::UserOfflinePageResponse"
    ];

    userfile.UserOfflinePageResponse = class extends common.CommonPage
    {
        constructor(page, pageSize, totalCount, totalPage, list = null)
        {
            super(page, pageSize, totalCount, totalPage);
            this.list = list;
        }

        _iceWriteMemberImpl(ostr)
        {
            userfile.UserOfflineResponseListHelper.write(ostr, this.list);
        }

        _iceReadMemberImpl(istr)
        {
            this.list = userfile.UserOfflineResponseListHelper.read(istr);
        }
    };

    Slice.defineValue(userfile.UserOfflinePageResponse, iceC_userfile_UserOfflinePageResponse_ids[2], false);

    userfile.UserOfflinePageResponseDisp = class extends common.CommonPageDisp
    {
    };

    Slice.defineOperations(userfile.UserOfflinePageResponseDisp, undefined, iceC_userfile_UserOfflinePageResponse_ids, 2);

    const iceC_userfile_UserFileServiceHandler_ids = [
        "::Ice::Object",
        "::userfile::UserFileServiceHandler"
    ];

    userfile.UserFileServiceHandler = class extends Ice.Object
    {
    };

    userfile.UserFileServiceHandlerPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(userfile.UserFileServiceHandler, userfile.UserFileServiceHandlerPrx, iceC_userfile_UserFileServiceHandler_ids, 1,
    {
        "removeOfflineTask": [, , , , [3], [[4], ["common.StringListHelper"]], ,
        [
            userfile.FileOperationException
        ], , ],
        "finishOfflineFileCopy": [, , , , , [[7], [4]], , , , ],
        "finishAllOfflineFileCopy": [, , , , , [[7]], , , , ],
        "listOfflinePage": [, , , , ["userfile.UserOfflinePageResponse", true], [[4], [3], [3], [3]], ,
        [
            userfile.FileOperationException
        ], , true],
        "createOfflineTask": [, , , , ["userfile.UserOfflineResponse", true], [[4], [7], [7], [7], [7], [7]], ,
        [
            userfile.FileOperationException
        ], , true],
        "fetchUserOfflineTask": [, , , , ["userfile.UserOfflineResponseListHelper"], [[7]], , , , true],
        "fetchUserOfflineTaskById": [, , , , ["userfile.UserOfflineResponse", true], [[7], [4]], ,
        [
            userfile.FileOperationException
        ], , true],
        "reportFileCopied": [, , , , [1], [[4], [7], [7], [7], [4]], ,
        [
            userfile.FileOperationException
        ], , ],
        "copyStoreFileToPath": [, , , , ["userfile.UserFileResponse", true], [[7], [7], [4], [3], [4], [7], [7], [7], [7]], ,
        [
            userfile.FileOperationException
        ], , true],
        "createDirectory": [, , , , ["userfile.UserFileResponse", true], [[4], [7], [7], [7], [1]], ,
        [
            userfile.FileOperationException
        ], , true],
        "get": [, , , , ["userfile.UserFileResponse", true], [[4], [7], [7]], ,
        [
            userfile.FileOperationException
        ], , true],
        "listDirectoryPage": [, , , , ["userfile.UserFilePageResponse", true], [[4], [7], [7], [3], [3], [3], [3], [3]], ,
        [
            userfile.FileOperationException
        ], , true],
        "listDirectory": [, , , , ["userfile.UserFileResponseListHelper"], [[4], [7], [7], [3], [3], [3], [3], [3]], ,
        [
            userfile.FileOperationException
        ], , true],
        "copyStoreFileToUserFile": [, , , , ["userfile.UserFileResponse", true], [[7], [7], [4], [3], [4], [7], [7], [7], [1]], ,
        [
            userfile.FileOperationException
        ], , true],
        "checkUserFileExists": [, , , , [1], [[4], [7], [7], [7]], , , , ],
        "move": [, , , , [1], [[4], ["userfile.SimpleFileListHelper"], [7], [7], [1]], ,
        [
            userfile.FileOperationException
        ], true, ],
        "rename": [, , , , [1], [[4], [7], [7], [7], [1]], ,
        [
            userfile.FileOperationException
        ], , ],
        "recycle": [, , , , [1], [[4], ["userfile.SimpleFileListHelper"]], ,
        [
            userfile.FileOperationException
        ], true, ],
        "remove": [, , , , [1], [[4], ["userfile.SimpleFileListHelper"]], ,
        [
            userfile.FileOperationException
        ], true, ],
        "test": [, , , , [1], [["userfile.SimpleFileListHelper"]], , , true, ],
        "test2": [, , , , [1], [["userfile.SimpleFile", true]], , , true, ]
    });
    exports.userfile = userfile;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : this.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : this));
